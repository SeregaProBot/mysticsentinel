import asyncio
import logging
import sqlite3
from pathlib import Path
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import ChatPermissions, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --- #
logging.basicConfig(level=logging.INFO)
BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù"
ADMINS = [123456789]  # –í–∞—à ID
MODERATORS = [987654321]

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è --- #
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.MARKDOWN)
dp = Dispatcher()
DB_PATH = Path("mystic.db")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã --- #
WELCOME_MSG = """üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_mention}!

–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:
1. –ù–µ —Å–ø–∞–º—å—Ç–µ
2. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Ç
3. –£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö"""
TRIGGERS = {
    "–º–∞—Ç": ["–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç"],
    "—Ä–µ–∫–ª–∞–º–∞": ["–∫—É–ø–∏—Ç—å", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ"]
}
MAX_WARNS = 3

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö --- #
def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""
        CREATE TABLE IF NOT EXISTS warns (
            user_id INTEGER,
            chat_id INTEGER,
            count INTEGER DEFAULT 0,
            PRIMARY KEY (user_id, chat_id)
        )""")

def add_warn(user_id: int, chat_id: int) -> int:
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("INSERT OR IGNORE INTO warns VALUES (?, ?, 0)", (user_id, chat_id))
        conn.execute("UPDATE warns SET count = count + 1 WHERE user_id = ? AND chat_id = ?", 
                    (user_id, chat_id))
        return conn.execute("SELECT count FROM warns WHERE user_id = ? AND chat_id = ?", 
                          (user_id, chat_id)).fetchone()[0]

# --- –ö–æ–º–∞–Ω–¥—ã --- #
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("üîÆ Mystic Sentinel - –º–∞–≥–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–∞–∂ –≤–∞—à–µ–≥–æ —á–∞—Ç–∞")

@dp.message(Command("admin"), F.from_user.id.in_(ADMINS))
async def admin_panel(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="admin_menu"))
    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=builder.as_markup())

# --- –ú–æ–¥–µ—Ä–∞—Ü–∏—è --- #
@dp.message(F.text.contains("–∞—Ä–∞–±"))
async def anti_arab(message: types.Message):
    await message.delete()
    await message.answer(f"üö´ {message.from_user.mention}, –∞—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")

@dp.message(lambda msg: any(word in msg.text.lower() for words in TRIGGERS.values() for word in words))
async def anti_trigger(message: types.Message):
    warns = add_warn(message.from_user.id, message.chat.id)
    await message.delete()
    if warns >= MAX_WARNS:
        await message.answer(f"‚õî {message.from_user.mention} –ø–æ–ª—É—á–∏–ª –±–∞–Ω!")
        await bot.ban_chat_member(message.chat.id, message.from_user.id)
    else:
        await message.answer(f"‚ö†Ô∏è {message.from_user.mention}, –Ω–∞—Ä—É—à–µ–Ω–∏–µ! –í–∞—Ä–Ω–æ–≤: {warns}/{MAX_WARNS}")

# --- –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è --- #
@dp.message(F.new_chat_members)
async def welcome(message: types.Message):
    for user in message.new_chat_members:
        await message.answer(WELCOME_MSG.format(user_mention=user.mention))
    await message.delete()

@dp.message(F.left_chat_member)
async def goodbye(message: types.Message):
    await message.delete()

# --- –ó–∞–ø—É—Å–∫ --- #
async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())