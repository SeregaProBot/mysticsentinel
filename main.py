import logging
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import ChatPermissions
from config import BOT_TOKEN, ADMINS, MODERATORS

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ --- #
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.MARKDOWN)
dp = Dispatcher()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã --- #
WELCOME_MSG = "üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_mention}! –ß–∏—Ç–∞–π –ø—Ä–∞–≤–∏–ª–∞."
TRIGGERS = {
    "–º–∞—Ç": ["–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç", "—Ç—É–ø–æ–π"],
    "—Ä–µ–∫–ª–∞–º–∞": ["–∫—É–ø–∏—Ç—å", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ", "http"]
}
MAX_WARNS = 3

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö --- #
def add_warn(user_id: int, chat_id: int):
    conn = sqlite3.connect("mystic.db")
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO warns VALUES (?, ?, 0)", (user_id, chat_id))
    cursor.execute("UPDATE warns SET count = count + 1 WHERE user_id = ? AND chat_id = ?", (user_id, chat_id))
    conn.commit()
    warns = cursor.execute("SELECT count FROM warns WHERE user_id = ? AND chat_id = ?", (user_id, chat_id)).fetchone()[0]
    conn.close()
    return warns

# --- –ö–æ–º–∞–Ω–¥—ã --- #
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("üîÆ Mystic Sentinel ‚Äî –º–∞–≥–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–∞–∂ –≤–∞—à–µ–≥–æ —á–∞—Ç–∞.")

@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id in ADMINS:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="üõ° –ê–Ω—Ç–∏-—Å–ø–∞–º", callback_data="antispam"))
        builder.add(types.InlineKeyboardButton(text="üîû –ê–Ω—Ç–∏-–∞—Ä–∞–±", callback_data="antiarab"))
        await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=builder.as_markup())

# --- –ú–æ–¥–µ—Ä–∞—Ü–∏—è --- #
@dp.message(F.text.contains("–∞—Ä–∞–±"))
async def anti_arab(message: types.Message):
    await message.delete()
    await message.answer(f"üö´ {message.from_user.mention}, –∞—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")

@dp.message(lambda msg: any(word in msg.text.lower() for words in TRIGGERS.values() for word in words))
async def anti_trigger(message: types.Message):
    warns = add_warn(message.from_user.id, message.chat.id)
    await message.delete()
    if warns >= MAX_WARNS:
        await message.answer(f"‚õî {message.from_user.mention} –ø–æ–ª—É—á–∏–ª –±–∞–Ω –∑–∞ {MAX_WARNS} –≤–∞—Ä–Ω–∞!")
        await bot.ban_chat_member(message.chat.id, message.from_user.id)
    else:
        await message.answer(f"‚ö†Ô∏è {message.from_user.mention}, —Ç—Ä–∏–≥–≥–µ—Ä! –í–∞—Ä–Ω–æ–≤: {warns}/{MAX_WARNS}")

# --- –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è --- #
@dp.message(F.new_chat_members)
async def welcome(message: types.Message):
    for user in message.new_chat_members:
        await message.answer(WELCOME_MSG.format(user_mention=user.mention))
    await message.delete()

@dp.message(F.left_chat_member)
async def goodbye(message: types.Message):
    await message.delete()

# --- –ó–∞–ø—É—Å–∫ --- #
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())